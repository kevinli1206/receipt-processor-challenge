package com.processor.challenge.receipt;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.springframework.stereotype.Service;

/**
 * Defines a processor for getting a JSON object and storing a receipt
 */
@Service
public class ReceiptProcessor {
    Map<String, Integer> idToPoints = new HashMap<>();

    /**
     * Generate an id for the receipt and store and return its id
     * @param receipt the receipt to generate from
     * @return the generated id of the receipt
     */
    public String processReceipt(Receipt receipt) {
        String id = UUID.randomUUID().toString();
        int points = calculatePoints(receipt);
        idToPoints.put(id, points);
        return id;
    }

    /**
     * Get the total number of points for the receipt associated with this id
     * @param id the id of the receipt
     * @return the number of total calculated points of the receipt associated with the id
     */
    public int getPoints(String id) {
        return idToPoints.get(id);
    }

    /**
     * Calculate the total number of points in the receipt
     * @param receipt the receipt to calculate for
     * @return the total number of points for the receipt
     */
    public int calculatePoints(Receipt receipt) {
        int alphanumeric = countAlphanumeric((receipt.getRetailer()));
        int roundDollar = isRoundDollar(Double.parseDouble(receipt.getTotal())) ? 50 : 0;
        int multipleOfPointTwoFive = isPointTwoFiveMultiple(Double.parseDouble(receipt.getTotal())) ? 25 : 0;
        int pointsPerTwoItems = pointsPerTwoItems(receipt.getItems());
        int trimItemsDescriptionPoints = trimItemsDescriptionPoints(receipt.getItems());
        int getLLMPoints = pointsForLLM(receipt.getLargeLanguageModel(), Double.parseDouble(receipt.getTotal()));
        int purchaseDatePoints = pointsForPurchaseDate(receipt.getPurchaseDate());
        int purchaseTimePoints = pointsForPurchaseTime(receipt.getPurchaseTime());
        return alphanumeric + roundDollar + multipleOfPointTwoFive + pointsPerTwoItems +
            trimItemsDescriptionPoints + getLLMPoints + purchaseDatePoints + purchaseTimePoints;
    }

    /**
     * Count the number of alphanumeric characters in the string
     * @param retailer the string to calculate from
     * @return the number of alphanumeric characters
     */
    public int countAlphanumeric(String retailer) {
        int count = 0;
        for (char c : retailer.toCharArray()) {
            if (Character.isLetterOrDigit(c)) {
                count++;
            }
        }
        return count;
    }

    /**
     * Return true if the total amount is a round dollar with no cents
     * @param total the total
     * @return if the total amount is divisible by 1
     */
    public boolean isRoundDollar(double total) {
        return total % 1 == 0;
    }

    /**
     * Return true if the total amount is a multiple of 0.25
     * @param total the total
     * @return if the total is divisible by 0.25
     */
    public boolean isPointTwoFiveMultiple(double total) {
        return total % .25 == 0;
    }

    /**
     * Return the number of points based on the number of items where
     * every two items is equal to 5 points
     * @param items the list of items
     * @return the size of the items divided by 2 rounded down and multiplied by 5
     */
    public int pointsPerTwoItems(List<Item> items) {
        return (items.size() / 2) * 5;
    }

    /**
     * Get the number of points based on the trimmed length of the item descriptions
     * @param items the list of items
     * @return the total sum of all points for each item where if the 
     * trimmed length of the item description is a multiple of 3, add the price multiplied
     * by 0.2 and rounded up
     */
    public int trimItemsDescriptionPoints(List<Item> items) {
        int sum = 0;
        for (Item i : items) {
            if (i.getShortDescription().trim().length() % 3 == 0) {
                sum += (int) Math.ceil(Double.parseDouble(i.getPrice()) * 0.2);
            }
        }
        return sum;
    }

    /**
     * Get the number of points based on if the program was generated by a LLM
     * @param llm the string checking to see if this was generated by a LLM
     * @param total the total of the items
     * @return 5 if llm is "true" and the total is greater than 10, 0 otherwise
     */
    public int pointsForLLM(String llm, double total) {
        if (llm != null && llm.equals("true")) {
            return total > 10 ? 5 : 0;
        }
        return 0;
    }

    /**
     * Get the number of points based on if the purchase date was odd
     * @param date the purchase date as a string
     * @return 6 if the date was odd, 0 otherwise
     */
    public int pointsForPurchaseDate(String date) {
        int dayOfMonth = Integer.parseInt(date.substring(date.length() - 2));
        if (dayOfMonth % 2 == 0) {
            return 0;
        }
        return 6;
    }

    /**
     * Get the number of points based on if the purchase time was between 2 and 4 pm
     * @param time the purchase time as a string
     * @return 10 if the time was between 2 and 4, 0 otherwise
     */
    public int pointsForPurchaseTime(String time) {
        int hour = Integer.parseInt(time.substring(0, 2));
        int minute = Integer.parseInt(time.substring(time.length() - 2));
        if ((hour == 14 && minute > 0) || (hour == 15)) {
            return 10;
        }
        return 0;
    }
}
